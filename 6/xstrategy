#!/usr/bin/env python3
import json
import sys
import contextlib
import os
os_path = os.path.dirname(os.getcwd()) + '/Fish/Common'
sys.path.append(os_path)
os_path = os.path.dirname(os.getcwd()) + '/Fish/Player'
sys.path.append(os_path)

from Board import Board
from State import *
from Player import Player
from Move import Move
from Tile import *
from strategy import *
from game_tree import *


def parser(input_stream):
    """
    Parse the given input string from the client.
    :input_stream: string       a string representing the JSON input from client
    :return: JSON object
    """
    ordered_output = []
    maybe_json = ''
    for line in input_stream:
        strip_input = line.strip()
        maybe_json = maybe_json + strip_input
    return json.loads(maybe_json)

def parse_board(state_json):
    board_array = state_json['board']
    row_length = max(map(len, board_array))
    board = Board(len(board_array), max(map(len, board_array)))
    board.create_board_from_json(board_array)
    return board

def parse_players(state_json):
    players_json = state_json['players']
    players = []
    for player in players_json:
        new_player = Player(player['color'], score=player['score'])
        players.append(add_penguins_to_player(new_player, player['places']))
    return players

def add_penguins_to_player(player, places):
    for pos in places:
        player.add_penguin((pos[0], pos[1]))
    return player

def main():
    json_in = parser(sys.stdin)
    depth = json_in[0]
    state_json = json_in[1]
    board = parse_board(state_json)
    players = parse_players(state_json)
    state = State(players, board)
    tree = GameTree(state)
    strategy = Strategy()
    action = strategy.choose_action_minimax(tree, depth)
    if type(action) is Move:
        print(json.dumps(action.print_json()))
    else:
        print(json.dumps(False))

main()
