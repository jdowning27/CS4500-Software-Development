#!/usr/bin/env python3

from Fish.Admin.manager import Manager
from Fish.Remote.Adapters.legacy_to_logical_player import LegacyToLogicalPlayer
from Fish.Remote.Proxies.remote_player_proxy import RemotePlayerProxy
from Fish.Remote.Proxies.json_stream import JSONStream

import socketserver
import sys
from time import time

MIN_PLAYERS = 2  # 5
MAX_PLAYERS = 2  # 10
WAITING_PERIOD = 30
NUM_WAITING_PERIODS = 2

players = None


def run_tournament(players):
    """
    Run a tournament with a list of players.

    [List-of PlayerInterface] -> Void
    """
    for sock in players:
        sock.sendall('"hey"'.encode())
    winners, cheaters = Manager().run_tournament(players)
    print(f"[{len(winners)}, {len(cheaters)}]")


class ConnectionRequestHandler(socketserver.BaseRequestHandler):
    def handle(self):
        stream = JSONStream(self.request.makefile('r'), self.request.makefile('w'))
        stream.recv_json()
        players.append(self.request)
        # rpp = LegacyToLogicalPlayer(RemotePlayerProxy(stream))
        # players.append(rpp)


class Server(socketserver.TCPServer):
    def __init__(self, address, timeout):
        self.allow_reuse_address = True
        super().__init__(address, ConnectionRequestHandler)
        self.timeout = timeout

    def handle_timeout(self):
        pass





    lsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    lsock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    lsock.bind(("0.0.0.0", port))
    lsock.listen(32)
    clients = {}
    indices = {}
    cursors = {}

    to_read = [lsock]

def handle_request():
    ready_to_read, ready_to_write, in_error = select.select(to_read, [], [])

    for sock in ready_to_read:
        if sock == lsock:
            csock, addr = sock.accept()
            clients[csock] = 0
            idx = len(indices)
            indices[csock] = idx
            cursors[idx] = Cursor(idx).pack()
            # to_read.append(csock)
            print("Server: Client connected")
            continue







def main(port):
    """
    Create a Fish.com server, sign up players, and run a tournament.
    """
    with Server(('localhost', port), 1) as server:
        global players
        players = []
        waiting_periods = 1
        start_time = time()
        while True:
            server.handle_request()
            if len(players) >= MAX_PLAYERS:
                run_tournament(players)
                break
            if time() - start_time >= WAITING_PERIOD:
                if len(players) >= MIN_PLAYERS:
                    run_tournament(players)
                    break
                elif waiting_periods >= NUM_WAITING_PERIODS:
                    break
                else:
                    waiting_periods += 1
                    start_time = time()


if __name__ == '__main__':
    main(int(sys.argv[1]))
